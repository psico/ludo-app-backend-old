type Query {
    userInfoById(id: String!): UserInfo
    usersInfo: [UserInfo]
    matchByID(id: ID!): Match
    matches: [Match]
}

type Mutation {
    createMatch(match: MatchInput): Match
    createComment(commentInput: CommentInput): Comment
    createUser(name: String!, authProvider: AuthData!): User
    createLink(url: String!, description: String!): Link
}

type User {
    id: ID!
    name: String!
    email: String
    password: String
}

input AuthData {
    email: String!
    password: String!
}

type Link {
    id: ID!
    url: String!
    description: String
    postedBy: User
}

type Friend {
    uid: ID
    name: String
}

input FriendInput {
    uid: ID
    name: String
}

type UserInfo {
    uid: ID
    name: String
    friends:[Friend!]!
}

type Match {
    docId: ID
    uid: ID
    gameMoment: String
    players: [Friend!]
    game: Game
    comments: [Comment]
}

input MatchInput {
    docId: ID
    uid: ID
    gameMoment: String
    game: GameInput
    players: [FriendInput]
}

type Game {
    name: String
    objectId: String
    yearPublished: String
}

input GameInput {
    name: String
    objectId: String
    yearPublished: String
}

type Comment {
    uid: ID
    name: String
    comment: String
}

input CommentInput {
    uid: ID
    matchId: ID
    comment: String
}
